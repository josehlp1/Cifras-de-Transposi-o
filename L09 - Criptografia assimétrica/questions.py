# -*- coding: utf-8 -*-
"""L09 Segurança.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MUVJV0HPNpgPzuLsVK0KhLk1JEJ7jbU-
"""

!pip install cryptography

"""Questão 1
Crie um programa que gere um par de chaves privada e pública relacionadas.
Exiba o valor do módulo e dos expoentes de cada chave gerada.
Salve cada uma das chaves num arquivo separado, pois as chaves precisarão ser recuperadas nas questões seguintes.
Qual é o expoente e o módulo do par de chaves gerados?
"""

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

# Gerar o par de chaves privada e pública
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)
public_key = private_key.public_key()

# Exibir o valor do módulo e do expoente da chave privada
private_numbers = private_key.private_numbers()
print("Chave Privada:")
print("Módulo:", private_numbers.p * private_numbers.q)
print("Expoente:", private_numbers.d)
print()

# Exibir o valor do módulo e do expoente da chave pública
public_numbers = public_key.public_numbers()
print("Chave Pública:")
print("Módulo:", public_numbers.n)
print("Expoente:", public_numbers.e)
print()

# Salvar a chave privada em um arquivo
with open("private_key.pem", "wb") as f:
    f.write(private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    ))

# Salvar a chave pública em um arquivo
with open("public_key.pem", "wb") as f:
    f.write(public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    ))

"""Questão 2
Crie um programa que criptografe um arquivo submetido pelo usuário utilizando o algoritmo AES.
Criptografe a chave simétrica utilizada (do algoritmo AES) utilizando a chave pública gerada na questão 1.
Qual é o texto simples e o texto cifrado pelo algoritmo RSA?
"""

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
import os

def criptografar_arquivo(caminho_arquivo, chave_aes, iv):
    with open(caminho_arquivo, 'rb') as arquivo:
        texto_plano = arquivo.read()
    cipher = Cipher(algorithms.AES(chave_aes), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    texto_cifrado = encryptor.update(texto_plano) + encryptor.finalize()
    return texto_cifrado

def criptografar_chave_aes(chave_aes, chave_publica):
    chave_aes_cifrada = chave_publica.encrypt(
        chave_aes,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return chave_aes_cifrada

# Carregando a chave pública RSA
with open('public_key.pem', 'rb') as arquivo:
    chave_publica = serialization.load_pem_public_key(arquivo.read(), backend=default_backend())

# Gerando uma chave AES e um IV aleatórios
chave_aes = os.urandom(32)  # 256 bits
iv = os.urandom(16)  # 128 bits

# Pede para o usuário inserir o caminho do arquivo
caminho_arquivo = input('Digite o caminho do arquivo para criptografar: ')

# Criptografa o arquivo
texto_cifrado = criptografar_arquivo(caminho_arquivo, chave_aes, iv)

# Criptografa a chave AES
chave_aes_cifrada = criptografar_chave_aes(chave_aes, chave_publica)

# Salva o arquivo criptografado
with open('arquivo_cifrado', 'wb') as arquivo:
    arquivo.write(texto_cifrado)

# Salva a chave AES criptografada
with open('chave_aes_cifrada', 'wb') as arquivo:
    arquivo.write(chave_aes_cifrada)

# Exibe as chaves
print('Chave AES (texto plano):', chave_aes.hex())
print('Chave AES criptografada (RSA):', chave_aes_cifrada.hex())

"""Questão 3
Crie um programa que decriptografe a chave de um algoritmo AES, utilizando a chave simétrica gerada na questão 2.
Será preciso recorrer a chave privada, gerada na questão 1, para poder decifrar a chave.
Decriptografe o arquivo utilizando a chave obtida.
"""

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
import os

# Função para descriptografar a chave AES usando RSA
def decrypt_aes_key(encrypted_aes_key, private_key):
    aes_key = private_key.decrypt(
        encrypted_aes_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return aes_key

# Função para descriptografar um arquivo usando AES
def decrypt_file(encrypted_file_path, aes_key, iv):
    with open(encrypted_file_path, "rb") as f:
        ciphertext = f.read()
    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    return plaintext

# Carregar a chave privada RSA
with open("private_key.pem", "rb") as f:
    private_key = serialization.load_pem_private_key(f.read(), password=None, backend=default_backend())

# Carregar a chave AES criptografada
with open("encrypted_aes_key", "rb") as f:
    encrypted_aes_key = f.read()

# Descriptografar a chave AES
aes_key = decrypt_aes_key(encrypted_aes_key, private_key)

# Descriptografar o arquivo
iv = os.urandom(16)
decrypted_file = decrypt_file("encrypted_file", aes_key, iv)

# Salvar o arquivo descriptografado
with open("decrypted_file", "wb") as f:
    f.write(decrypted_file)

print("Arquivo descriptografado com sucesso!")